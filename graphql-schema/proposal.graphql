enum ProposalType {
  Text
  ParameterChange
  CommunityPoolSpend
  SoftwareUpgrade
  CancelSoftwareUpgrade
}

enum ProposalStatus {
  Unspecified
  DepositPeriod
  VotingPeriod
  Passed
  Rejected
  Failed
  Invalid
}

enum ProposalStatusFilter {
  Voting
  Deposit
  Passed
  Rejected
}

enum ProposalVoteOption {
  Yes
  No
  Abstain
  NoWithVeto
}

type Proposal {
  id: ID!
  proposalId: Int!
  title: String!
  description: String!
  type: ProposalType!
  submitTime: DateTime!
  depositEndTime: DateTime
  "Sum of all deposit in chain's coin denom (non chain's coin denom deposits excluded)"
  depositTotal: BigInt!
  votingStartTime: DateTime
  votingEndTime: DateTime
  proposerAddress: String!
  status: ProposalStatus!
  tallyResult: ProposalTallyResult

  reactions: [ReactionCount!]!
  myReaction: String
}

type ProposalEdge {
  cursor: String!
  node: Proposal!
}

type ProposalConnection {
  pageInfo: PageInfo!
  edges: [ProposalEdge!]!
  totalCount: Int!
}

type ProposalTallyResult {
  yes: BigInt!
  no: BigInt!
  noWithVeto: BigInt!
  abstain: BigInt!
  outstandingOption: ProposalVoteOption
}

"""
Filter by address's role in proposals
or operator will be used when more than one is* field is specified
"""
input ProposalAddressFilter {
  address: String!
  isDepositor: Boolean!
  isVoter: Boolean!
  isSubmitter: Boolean!
}

input QueryProposalsInput {
  "Number of proposals to show in a page (limit)"
  first: Int!
  "Offset"
  after: Int!
  "Filter by proposal status"
  status: ProposalStatusFilter
  "filter by address's role in proposals"
  address: ProposalAddressFilter
  "filter by proposal title (not implemented)"
  searchTerm: String
}

extend type Query {
  proposals(input: QueryProposalsInput!): ProposalConnection!
  proposalByID(id: ID!): Proposal
}
